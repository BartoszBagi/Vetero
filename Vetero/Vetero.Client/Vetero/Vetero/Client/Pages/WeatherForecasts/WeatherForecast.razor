@page "/weather-forecast"
@using System.Security.Claims;
@using Vetero.Client.Components.Forecast
@using Vetero.Shared.ViewModels.Rapid.ForecastItems;
@inject IApiBroker broker
@inject IAuthenticationService authenticationService

@if (forecast == null)
{
    <p>Loading....</p>
}
else
{
    <WeatherForecastDisplay forecastDay="forecastDay" forecast="forecast" avgCurrent="avgCurrent" />
}
@code {
    private ForecastWeather forecast;
    private IEnumerable<Forecastday> forecastDay;
    private Forecastday avgCurrent;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var claims = await authenticationService.GetAuthenticatedUserClaims();
        var cityName = claims != null ? claims.FirstOrDefault(x => x.Type == "City").Value : "Siedlce";
        forecast = await broker.GetForecastWeatherAsync(cityName, days: 14);
        forecastDay = forecast.forecast.forecastday;
        avgCurrent = forecastDay.FirstOrDefault();
    }


}