@using Vetero.Shared.Commands.Rapid;
@inject IJSRuntime JsRuntime
@inject IApiBroker broker

<div class="rz-background-color-success-lighter card text-center h-100" onclick="">
    @if (!string.IsNullOrWhiteSpace(DateTime))
    {
        <div class="card-header">
            @DateTime
            <br/>
            <RadzenImage Path="@WeatherIcon" />
        </div>
    }
    <div class="card-body">
        <p class="mb-0">
            @WeatherDescription
        </p>
        <p class="display-6">
            @Temperature °c
        </p>
        <p class="small">
            Temp. odczuwalna @TemperatureFeelsLike °c
        </p>
        <p class="small">
            Max @TemperatureMax °c Min @TemperatureMin °c
        </p>
        <p class="small">
            Wilgotność @Humidity %
        </p>
        <p class="small">
            Wiatr @WindSpeed m/s
        </p>
        <p class="small">
            Deszcz @WindSpeed m/s
        </p>
    </div>
</div>

@code {
    [Parameter] public string? DateTime { get; set; }
    [Parameter] public string WeatherDescription { get; set; }
    [Parameter] public double Temperature { get; set; }
    [Parameter] public double TemperatureFeelsLike { get; set; }
    [Parameter] public double TemperatureMax { get; set; }
    [Parameter] public double TemperatureMin { get; set; }
    [Parameter] public double Humidity { get; set; }
    [Parameter] public double WindSpeed { get; set; }
    [Parameter] public double TotalPrecip_mm { get; set; }
    [Parameter] public string WeatherIcon { get; set; }

    private async Task SaveWeatherTestData()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Jesteś pewien?");
        if (confirmed)
        {
            await broker.SaveWeatherTestData(new WeatherTestDataDto()
            {
                Date = DateTime,
                Humidity = Humidity,
                Temperature = Temperature,
                WindKph = WindSpeed,
                TotalPrecip_mm = TotalPrecip_mm
            });
        }
    }
}