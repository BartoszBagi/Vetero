@using Vetero.Shared.ViewModels.Rapid.ForecastItems;
@inject DialogService DialogService
@inject IJSRuntime JsRuntime
@inject IApiBroker broker

<div class="row">
@foreach (Forecastday forecastDay in @forecastDays)
{
        <div class="col-4 text-center" style="max-width: 300px">
        <WeatherCard DateTime="@forecastDay.date"
                        WeatherDescription="@forecastDay.day.condition.text"
                        Temperature="@forecastDay.day.avgtemp_c"
                        TemperatureFeelsLike="@forecastDay.hour.Where(x => x.temp_c == @forecastDay.hour.Max(x => x.temp_c)).FirstOrDefault().feelslike_c"
                        TemperatureMax="@forecastDay.day.maxtemp_c"
                        TemperatureMin="@forecastDay.day.mintemp_c"
                        Humidity="@forecastDay.day.avghumidity"
                        WindSpeed="@forecastDay.day.avgvis_km" 
                        WeatherIcon="@forecastDay.day.condition.icon"/>
                        <button class="btn btn-primary" @onclick="() => SaveWeatherTestData(forecastDay)">Zapisz do porównania</button>
    </div>
}  
</div>
@code {
    [Parameter] public IEnumerable<Forecastday> forecastDays { get; set; }

    private async Task SaveWeatherTestData(Forecastday day)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Jesteś pewien?");
        if (confirmed)
        {
            await broker.SaveWeatherTestDataAsync(day.ToTestData());
        }
    }
}