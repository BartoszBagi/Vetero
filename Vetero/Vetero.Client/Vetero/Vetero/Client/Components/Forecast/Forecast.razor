@using Vetero.Shared.ViewModels.Rapid.ForecastItems;
@inject DialogService DialogService
@inject IJSRuntime JsRuntime
@inject IApiBroker broker

<div class="row rz-shadow-10">
    <RadzenPanel AllowCollapse="false" Class="rz-my-10 rz-mx-auto" Style="width: 400px;">
        <ChildContent>
            <RadzenDataList PageSize="1" AllowPaging="true"
                            Data="@forecastDays" TItem="Forecastday">
                <Template Context="forecastDay" >
                    <WeatherCard DateTime="@forecastDay.date"
                                 WeatherDescription="@forecastDay.day.condition.text"
                                 Temperature="@forecastDay.day.avgtemp_c"
                                 TemperatureFeelsLike="@forecastDay.hour.Where(x => x.temp_c == @forecastDay.hour.Max(x => x.temp_c)).FirstOrDefault().feelslike_c"
                                 TemperatureMax="@forecastDay.day.maxtemp_c"
                                 TemperatureMin="@forecastDay.day.mintemp_c"
                                 Humidity="@forecastDay.day.avghumidity"
                                 WindSpeed="@forecastDay.day.avgvis_km" 
                                 WeatherIcon="@forecastDay.day.condition.icon"/>
                                 <td><button class="btn btn-primary" @onclick="() => SaveWeatherTestData(forecastDay)">Zapisz do porównania</button></td>
                </Template>
            </RadzenDataList>
        </ChildContent>
    </RadzenPanel>
</div>

@code {
    [Parameter] public IEnumerable<Forecastday> forecastDays { get; set; }

    private async Task SaveWeatherTestData(Forecastday day)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Jesteś pewien?");
        if (confirmed)
        {
            await broker.SaveWeatherTestData(day.ToTestData());
        }
    }
}
